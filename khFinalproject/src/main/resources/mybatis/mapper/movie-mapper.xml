<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="movie">
	<select id="getSequence" resultType="int">
		select movie_seq.nextval from dual
	</select>
	
	<select id="getPhotoSequence" resultType="int">
		select movie_photo_seq.nextval from dual
	</select>
	
	<insert id="insert" parameterType="MemberDto">
		insert into movie values(
		#{movieNo},
		#{movieTitle},
		#{movieEngTitle},
		#{movieGrade},
		#{movieType},
		#{movieCountry},
		#{movieOpening},
		#{movieRuntime},
		0,
		#{movieContent}
		)
	</insert>
	

	<select id="list" resultType="MovieDto">
		select * from movie
	</select>
	
	<select id="get" parameterType="int" resultType="MovieDto">
		select * from movie where movie_no = #{movieNo}
	</select>
	
	<select id="listWithoutDuplicate" parameterType="int" resultType="MovieDto">
		select movie_no, movie_title, movie_opening from movie
		minus
		select movie_no, movie_title,movie_opening from
		(select s.schedule_no,s.movie_no,t.theater_no,
		s.schedule_start,s.schedule_end,
		m.movie_grade,m.movie_title,m.movie_eng_title,m.movie_runtime,m.movie_opening,
		t.theater_sido,t.theater_name
		from schedule S
		join movie M on s.movie_no = m.movie_no
		join theater T on t.theater_no = s.theater_no) 
		where theater_no = #{theaterNo}
	</select>
	
	<select id="listByOpening" resultType="MovieDto">
		select * from movie where sysdate between movie_opening-30 and movie_opening+30
	</select>
	
	<select id="nowList" parameterType="map" resultType="MovieDto">
		<choose>
		<when test="list.size() > 0">
		select * from movie
			where movie_no in 
			<foreach collection="list" open="(" close=")" separator="," item="no">
				#{no}
			</foreach>
		</when>
		<otherwise>
			select * from movie where movie_no=0
		</otherwise>
		</choose>
	</select>
	
	<select id="getTitleList" parameterType="String" resultType="MovieDto">
		select * from movie where instr(movie_title,#{movieTitle})>0
	</select>
	
	<select id="notHaveSchedule" resultType="int">
		select 
		distinct(m.movie_no)
		from movie m
		left join schedule s on m.movie_no = s.movie_no
		<![CDATA[where s.schedule_no is null and sysdate - m.movie_opening <= 30]]>
		order by m.movie_no asc
	</select>
	
	<delete id="delete" parameterType="int">
		delete movie where movie_no=#{movieNo}
	</delete>
	
	<update id="update" parameterType="MovieDto">
		update movie set
		movie_title = #{movieTitle},
		movie_eng_title = #{movieEngTitle},
		movie_grade = #{movieGrade},
		movie_type = #{movieType},
		movie_country = #{movieCountry},
		movie_opening = #{movieOpening},
		movie_runtime = #{movieRuntime},
		movie_content = #{movieContent}
		where movie_no = #{movieNo}
	</update>
	
	<!-- 보고 싶은 영화 목록 -->
	<select id="myMovieLike" parameterType="int" resultType="MovieDto">
		select m.* from movie m
		inner join movie_like ml on m.movie_no = ml.movie_no
		where ml.member_no = #{memberNo}
	</select>
	
	<select id="reservationList" resultType="MovieDto">
		select * from movie order by 
	</select>

    <update id="refreshStar" parameterType="int">
    	update movie set movie_starpoint =  (select sum(review_starpoint) from review where movie_no=#{movieNo})/(select count(*) from review where movie_no=#{movieNo})
        where movie_no=#{movieNo}
    </update>
</mapper>