<?xml version="1.0" encoding="UTF-8" ?>

<!-- myBatis 매퍼 파일 - DBMS에서 실행할 SQL 구문을 저장하는 XML 파일 - namespace를 통해서 여러 개의 
	매퍼를 구분한다 - 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다. - 
	<insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다. - 각 구문은 외부에서 
	호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다. - parameterType 은 구문을 실행하기 위해 필요한 데이터의 
	형태를 말한다. - resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다. -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store">
	<insert id="insert" parameterType="StoreDto">
		insert into product values(
		product_seq.nextval,
		#{productType},
		#{productName},
		#{productPrice},
		#{productOrigin},
		#{productIntro},
		#{productContent}
		)

	</insert>
	<select id="list" resultType="StoreDto">
		select * from product
	</select>
	<update id="changeInformation" parameterType="StoreDto">
		update product
		
		<!-- set을 이용하여 수정항목을 동적으로 배치(단 마지막 콤마는 반드시 작성) -->
		<set>
			<if test="productType != null">
				product_type = #{productType},
			</if>
			<if test="productName != null">
				product_name = #{productName},
			</if>
			<if test="productPrice != null">
				product_price = #{productPrice},
			</if>
			<if test="productOrigin != null">
				product_origin = #{productOrigin},
			</if>
			<if test="productIntro != null">
				product_intro = #{productIntro},
			</if>
			<if test="productContent != null">
				product_content = #{productContent},
			</if>
		</set>
		where product_no = #{productNo}
	</update>
</mapper>