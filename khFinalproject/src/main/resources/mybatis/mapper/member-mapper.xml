<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<!-- 조회 -->
	<select id="list" resultType="MemberDto">
		select * from member order by member_no desc
	</select>
	
	<!-- 회원가입 -->
	<insert id="join" parameterType="MemberDto">
		insert into member
		values(
			member_no_seq.nextval,#{memberEmail},#{memberPw},
			#{memberName},#{memberNick},#{memberGender},
			#{memberBirth}, #{memberPhone},'브론즈',0,sysdate
		)
	</insert>
	
	<!-- 단일조회 -->
	<select id="get" parameterType="String" resultType="MemberDto">
		select * from member where member_email = #{memberEmail}
	</select>
	
	<!-- PK로 단일조회 -->
	<select id="get2" parameterType="int" resultType="MemberDto">
		select * from member where member_no = #{memberNo}
	</select>
	
	<!-- 닉네임 중복검사를 위한 단을 조회 -->
	<select id="get3" parameterType="String" resultType="MemberDto">
		select * from member where member_nick = #{memberNick}
		
	</select>
	<!-- 아이디찾기 -->
	<select id="findId" parameterType="map" resultType="MemberDto">
		select member_email from member where member_name=#{memberName} and member_phone=#{memberPhone}
	</select>
	
	<!-- 비밀번호찾기 -->
	<select id="findPw" parameterType="map" resultType="MemberDto">
		select member_pw from member where member_name=#{memberName} and member_email=#{memberEmail} and member_phone=#{memberPhone} 
	</select>
	
	<!-- 검색 및 페이지네이션 -->
	<select id="count" parameterType="map" resultType="int">
		select count(*) from member
		<where>
			<if test="column != null and keyword != null">	
			 and instr(${column},#{keyword}) > 0
			</if>
		</where>
	</select>
	
	<select id="search" parameterType="map" resultType="MemberDto">
		select * from (
		select rownum rn, tmp.* from(
		select * from member
		<where>
			<if test="column != null and keyword != null">	
			 and instr(${column},#{keyword}) > 0
			</if>
		</where>
		order by member_no desc
		)tmp) where rn between #{begin} and #{end}
	</select>	
	
	<!-- 해당 아이디가 있는지 체크 -->
	<select id="check" parameterType="map" resultType="MemberDto">
	  select * from member where member_Email=#{memberEmail};
	</select>

	
	<!-- 임시비밀번호로  변경 -->
	<update id="temporayPassword" parameterType="map">
		update member set member_pw=#{memberPw} 
		where 
		member_email=#{memberEmail} and member_name=#{memberName} and member_phone=#{memberPhone}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="changePassword" parameterType="map">
		update member set member_pw = #{changePw}
		where member_email = #{memberEmail}
	</update>
	<!-- 회원삭제 -->
	<delete id="quit" parameterType="String">
		delete member where member_email = #{memberEmail}
	</delete>
	
	<!-- 관리자회원탈퇴 -->
	<delete id="adminDrop" parameterType="int">
		delete member where member_no = #{memberNo}
	</delete>
	
	<!-- 회원 수정 -->
	
	<update id="changeInformation" parameterType="MemberDto">
		update member
		
		<!-- set을 이용하여 수정항목을 동적으로 배치(단 마지막 콤마는 반드시 작성) -->
		<set>
			<if test="memberNick != null">
				member_nick = #{memberNick},
			</if>
			<if test="memberBirth != null">
				member_birth = #{memberBirth},
			</if>
			<if test="memberPhone != null">
				member_phone = #{memberPhone},
			</if>
			<if test="memberPoint != null">
				member_point = #{memberPoint},
			</if>
			<if test="memberGrade != null">
				member_grade = #{memberGrade},
			</if>
			
		</set>
		where member_email = #{memberEmail}
	</update>
	
	<update id="updatePoint">
		update member set member_point = member_point - #{memberPoint}
		where member_no = #{memberNo}
	</update>
	
	<update id="returnPoint">
		update member set member_point = member_point + #{memberPoint}
		where member_no = #{memberNo}
	</update>
	
	<update id="updateGrade">
		update member
		set member_grade = 
		    case
		       <![CDATA[ when member_point < 10000]]>
		            then '브론즈'
		        when member_point between 10000 and 12000
		            then '실버'
		        else '골드'
		    end
		where member_grade not in('운영자','정지');
	</update>
</mapper>