<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
	myBatis 매퍼 파일
	- DBMS에서 실행할 SQL 구문을 저장하는 XML 파일
	- namespace를 통해서 여러 개의 매퍼를 구분한다
	- 테이블 당 1개씩 만드는 것이 일반적이며, 따라서 namespace를 테이블명으로 작성하면 구분이 용이하다.
	- <insert> , <select> , <update> , <delete>를 이용해서 CRUD 구문을 작성한다.
	- 각 구문은 외부에서 호출이 가능하도록 반드시 ID를 겹치지 않게 부여해야 한다.
	- parameterType 은 구문을 실행하기 위해 필요한 데이터의 형태를 말한다.
	- resultType은 구문을 실행한 결과를 어떤 형태로 변환해야 하는지를 말한다.
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">
	<select id="list" resultType="BoardVO">
		select B.*,member_nick from board b
		inner join member m on b.member_email = m.member_email order by board_no desc
	</select>
	
	<!-- 단일조회 -->
	<select id="get" parameterType="int" resultType="BoardDto">
		select * from board where board_no=#{boardNo}
	</select>
	
	<!-- 닉네임을 뽑아오기 위한 단일조회 -->
	<select id="get2" parameterType="int" resultType="BoardVO">
		select B.*,member_nick from board b
		inner join member m on b.member_email = m.member_email 
        where board_no=#{boardNo}
	</select> 
	
	<!-- 시퀸스 미리뽑아오기  -->
	<select id="getSeq" resultType="int">
		select board_no_seq.nextval from dual
	</select>
	
	<select id="search" parameterType="map" resultType="BoardVO">
		select * from (
		select rownum rn, tmp.* from(
			select B.*,member_nick from board b inner join member m on b.member_email = m.member_email
		<where>
			<if test="column != null and keyword != null">	
			 and instr(${column},#{keyword}) > 0
			</if>
			
			<if test="boardTypeName !=null">	
			 and boardType_name=#{boardTypeName}
			</if>
		</where>
		connect by prior board_no = board_superno
		start with board_superno is null
		order siblings by board_groupno desc, board_no asc
		)tmp) where rn between #{begin} and #{end}
	</select>
	
	
	<select id="search1" parameterType="map" resultType="BoardDto">
		select * from (
		select rownum rn, tmp.* from(
			select * from board
		<where>
			<if test="memberEmail != null">	
			 and member_email = #{memberEmail}
			</if>
			<if test="column != null and keyword != null">	
			 and instr(${column},#{keyword}) > 0
			</if>
		</where>
		order by board_no desc
		)tmp) where rn between #{begin} and #{end}
	</select>
		
	<select id="count" parameterType="map" resultType="int">
		select count(*) from board b
		inner join member m on b.member_email = m.member_email
		<where>
			<if test="column != null and keyword != null">	
			 and instr(${column},#{keyword}) > 0
			</if>
			
			<if test="boardTypeName !=null">	
			 and boardType_name=#{boardTypeName}
			</if>
		</where>
	</select>
	
	<select id="count1" parameterType="map" resultType="int">
		select count(*) from board
		<where>
			<if test="memberEmail != null">	
			 and member_email = #{memberEmail}
			</if>
			<if test="column != null and keyword != null">	
			 and instr(${column},#{keyword}) > 0
			</if>
		</where>
	</select>
	
	<!-- 내가쓴 게시글 조회 -->
	<select id="myWrite" resultType="BoardDto">
		select * from board where member_email=#{memberEmail} order by board_no desc
	</select>	
	
	
	
	
	<!-- 게시판 글작성 -->
	<insert id="write1" parameterType="BoardDto">
		insert into board values(
			#{boardNo},
			#{boardtypeName},
			#{memberEmail},
			#{boardTitle},
			 sysdate,
			 #{boardContent},
		 	0,
		 	#{boardSuperno},
		 	#{boardGroupno},
		 	#{boardDepth}
		)
	</insert>
	
		<!-- 게시판 글작성 -->
	<insert id="write2" parameterType="BoardDto">
		insert into board values(
			#{boardNo},
			#{boardtypeName},
			#{memberEmail},
			#{boardTitle},
			 sysdate,
			 #{boardContent},
		 	0,
			null,
			#{boardNo},
			0
		)
	</insert>
	
	
	<!-- 게시글 삭제 -->
	<delete id="delete" parameterType="int">
	   delete board where board_no=#{boardNo}
	</delete>
	
	<!-- 게시글 업데이트 -->
	<update id="edit" parameterType="BoardDto">
		update board set board_title = #{boardTitle}, board_content = #{boardContent}
		where board_no = #{boardNo}
	</update>
	
	<!-- 조회수 업데이트 -->
	<update id="viewUp" parameterType="int">
		update board set board_views=board_views+1 where board_no=#{boardNo}
	</update>
	
	
	<!-- 리뷰 글작성 -->
	<insert id="reviewWrite" parameterType="ReviewDto">
		insert into review values(
			#{movieNo},
			#{memberNo},
			#{reviewContent},
			1,
			 sysdate,
		 	0,	
		)
	</insert>
	
	
	
</mapper>